#Following steps are skippable if docker is already installed and running.
###########################################################################
#Get docker:

  #Manjaro Linux (Arch):

    #This updates your OS
      sudo pacman -Syu

    #This installs docker
      sudo pacman -S docker

    #This runs and enables docker on launch
      sudo systemctl start docker
      sudo systemctl enable docker
    
    #Check version
      sudo docker version
    
#Get rid of permanent sudo:

  #Add your user to docker group
    sudo usermod -aG docker $USER
    
    reboot OS
    
#Test

  docker run hello-world

#If "Cannot connect to the Docker daemon" error occurs:

  env | grep DOCKER_HOST
  
  #If this command returns a value, the Docker client is set to connect to a Docker daemon running on that host. 
  #If it is unset, the Docker clientIf this command returns a value, the Docker client is set to connect to a Docker
  daemon running on that host. 
  #If it is set in error, use the following command to unset it:
  
    unset DOCKER_HOST
###########################################################################

## List Docker CLI commands
docker
docker container --help

## Display Docker version and info
docker --version
docker version
docker info

## Execute Docker image
docker run hello-world

## List Docker images
docker image ls

## List Docker containers (running, all, all in quiet mode)
docker container ls
docker container ls --all
docker container ls -aq

#######################DEFINING CONTAINER(PYTHON)#########################

#Create a working directory and cd into it
  mkdir directory-name
  cd directory-name
 
#Create a Dockerfile(this filename is a must) using nano
  nano Dockerfile
  
#Paste this:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
# Use an official Python runtime as a parent image
FROM python:2.7-slim

# Set the working directory to /app
WORKDIR /app

# Copy the current directory contents into the container at /app
COPY . /app

# Install any needed packages specified in requirements.txt
RUN pip install --trusted-host pypi.python.org -r requirements.txt

# Make port 80 available to the world outside this container
EXPOSE 80

# Define environment variable
ENV NAME World

# Run app.py when the container launches
CMD ["python", "app.py"]
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

#Save, thats python container defined, but app.py and requirements.txt are missing. Thats the next step.

#########################CREATING THE APP###########################

#When the above Dockerfile is built into an image, app.py and requirements.txt is present because of 
that Dockerfileâ€™s COPY command, and the output from app.py is accessible over HTTP thanks to the EXPOSE command.

#Create the files, mentioned in the dockerfile:

nano requirements.txt
  
  #paste:
  
  <<<<<<<<
  Flask
  Redis
  >>>>>>>>
  
nano app.py
  
  #paste:
  
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  
from flask import Flask
from redis import Redis, RedisError
import os
import socket

# Connect to Redis
redis = Redis(host="redis", db=0, socket_connect_timeout=2, socket_timeout=2)

app = Flask(__name__)

@app.route("/")
def hello():
    try:
        visits = redis.incr("counter")
    except RedisError:
        visits = "<i>cannot connect to Redis, counter disabled</i>"

    html = "<h3>Hello {name}!</h3>" \
           "<b>Hostname:</b> {hostname}<br/>" \
           "<b>Visits:</b> {visits}"
    return html.format(name=os.getenv("NAME", "world"), hostname=socket.gethostname(), visits=visits)

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=80)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

#Thats the app created

###########################################################################

